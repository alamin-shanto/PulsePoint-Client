import React, { useEffect, useState, useContext } from "react";
import AuthContext from "../Context/AuthContext";
import Swal from "sweetalert2";

const apiBase = import.meta.env.VITE_API_URL || "";

const pageSize = 10; // items per page

const AllUsersPage = () => {
  const { user, loading } = useContext(AuthContext);
  const [users, setUsers] = useState([]);
  const [filteredUsers, setFilteredUsers] = useState([]);
  const [filterStatus, setFilterStatus] = useState("all"); // all, active, blocked
  const [currentPage, setCurrentPage] = useState(1);
  const [loadingData, setLoadingData] = useState(true);

  const token = localStorage.getItem("access-token");

  useEffect(() => {
    if (!loading && user?.role === "admin") {
      fetchUsers();
    }
  }, [loading, user]);

  const fetchUsers = async () => {
    setLoadingData(true);
    try {
      const res = await fetch(`${apiBase}/users`, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      if (!res.ok) throw new Error("Failed to fetch users");
      const data = await res.json();
      setUsers(data);
      setFilteredUsers(data);
      setCurrentPage(1);
    } catch (error) {
      Swal.fire("Error", error.message, "error");
    } finally {
      setLoadingData(false);
    }
  };

  const filterByStatus = (status) => {
    setFilterStatus(status);
    if (status === "all") {
      setFilteredUsers(users);
    } else {
      setFilteredUsers(users.filter((u) => u.status === status));
    }
    setCurrentPage(1);
  };

  const updateUser = async (id, update) => {
    try {
      const res = await fetch(`${apiBase}/users/${id}`, {
        method: "PATCH",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(update),
      });
      if (!res.ok) throw new Error("Failed to update user");
      await fetchUsers();
      Swal.fire("Success", "User updated", "success");
    } catch (error) {
      Swal.fire("Error", error.message, "error");
    }
  };

  const handleBlockToggle = (user) => {
    const newStatus = user.status === "active" ? "blocked" : "active";
    Swal.fire({
      title: `${newStatus === "blocked" ? "Block" : "Unblock"} user?`,
      text: `${user.email} will be ${newStatus}.`,
      icon: "warning",
      showCancelButton: true,
      confirmButtonText: "Yes",
    }).then((result) => {
      if (result.isConfirmed) {
        updateUser(user._id, { status: newStatus });
      }
    });
  };

  const handleRoleChange = (user, newRole) => {
    if (user.role === newRole) {
      Swal.fire("Info", `User is already a ${newRole}`, "info");
      return;
    }
    Swal.fire({
      title: `Change role to ${newRole}?`,
      text: `${user.email} will become a ${newRole}.`,
      icon: "question",
      showCancelButton: true,
      confirmButtonText: "Yes",
    }).then((result) => {
      if (result.isConfirmed) {
        updateUser(user._id, { role: newRole });
      }
    });
  };

  // Pagination calculations
  const totalPages = Math.ceil(filteredUsers.length / pageSize);
  const paginatedUsers = filteredUsers.slice(
    (currentPage - 1) * pageSize,
    currentPage * pageSize
  );

  if (loading || loadingData) {
    return (
      <div className="flex justify-center items-center h-64 text-red-600">
        Loading users...
      </div>
    );
  }

  if (!user || user.role !== "admin") {
    return (
      <div className="text-center text-red-600 p-10">
        You do not have permission to view this page.
      </div>
    );
  }

  return (
    <div className="p-6 max-w-7xl mx-auto">
      <h2 className="text-3xl font-bold mb-6 text-center text-red-600">
        All Users
      </h2>

      {/* Filter */}
      <div className="mb-4 flex justify-center gap-4">
        {["all", "active", "blocked"].map((status) => (
          <button
            key={status}
            onClick={() => filterByStatus(status)}
            className={`px-4 py-2 rounded font-semibold ${
              filterStatus === status
                ? "bg-red-600 text-white"
                : "bg-gray-200 text-gray-800 hover:bg-gray-300"
            }`}
          >
            {status.charAt(0).toUpperCase() + status.slice(1)}
          </button>
        ))}
      </div>

      {/* Table */}
      <div className="overflow-x-auto">
        <table className="min-w-full bg-white rounded shadow overflow-hidden">
          <thead className="bg-red-600 text-white">
            <tr>
              <th className="p-3">Avatar</th>
              <th className="p-3">Email</th>
              <th className="p-3">Name</th>
              <th className="p-3">Role</th>
              <th className="p-3">Status</th>
              <th className="p-3">Actions</th>
            </tr>
          </thead>
          <tbody>
            {paginatedUsers.map((user) => (
              <tr key={user._id} className="border-b hover:bg-gray-50">
                <td className="p-2 text-center">
                  <img
                    src={
                      user.avatar || `https://i.pravatar.cc/40?u=${user.email}`
                    }
                    alt={user.name}
                    className="w-10 h-10 rounded-full object-cover mx-auto"
                  />
                </td>
                <td className="p-2">{user.email}</td>
                <td className="p-2">{user.name || "N/A"}</td>
                <td className="p-2 capitalize">{user.role}</td>
                <td className="p-2 capitalize">{user.status}</td>
                <td className="p-2 space-x-1">
                  {/* Block/Unblock */}
                  {user.status === "active" && (
                    <button
                      onClick={() => handleBlockToggle(user)}
                      className="bg-yellow-400 hover:bg-yellow-500 text-black px-2 py-1 rounded"
                      title="Block user"
                    >
                      Block
                    </button>
                  )}
                  {user.status === "blocked" && (
                    <button
                      onClick={() => handleBlockToggle(user)}
                      className="bg-green-400 hover:bg-green-500 text-black px-2 py-1 rounded"
                      title="Unblock user"
                    >
                      Unblock
                    </button>
                  )}

                  {/* Make Volunteer */}
                  {user.role !== "volunteer" && (
                    <button
                      onClick={() => handleRoleChange(user, "volunteer")}
                      className="bg-blue-500 hover:bg-blue-600 text-white px-2 py-1 rounded"
                      title="Make Volunteer"
                    >
                      Volunteer
                    </button>
                  )}

                  {/* Make Admin */}
                  {user.role !== "admin" && (
                    <button
                      onClick={() => handleRoleChange(user, "admin")}
                      className="bg-red-600 hover:bg-red-700 text-white px-2 py-1 rounded"
                      title="Make Admin"
                    >
                      Admin
                    </button>
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* Pagination Controls */}
      <div className="mt-4 flex justify-center gap-3">
        <button
          onClick={() => setCurrentPage((p) => Math.max(p - 1, 1))}
          disabled={currentPage === 1}
          className="px-3 py-1 rounded bg-gray-300 disabled:opacity-50"
        >
          Prev
        </button>
        <span className="px-3 py-1 rounded border">{currentPage}</span>
        <button
          onClick={() => setCurrentPage((p) => Math.min(p + 1, totalPages))}
          disabled={currentPage === totalPages}
          className="px-3 py-1 rounded bg-gray-300 disabled:opacity-50"
        >
          Next
        </button>
      </div>
    </div>
  );
};

export default AllUsersPage;
